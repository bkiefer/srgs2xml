/* The following code was generated by JFlex 1.7.0 */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Copyright (C) 2019-  Bernd Kiefer <kiefer@dfki.de>                      *
 * All rights reserved.                                                    *
 *                                                                         *
 * License: CC 4.0                                                         *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

package org.jvoicexml.processor.srgs.abnf;

import java.io.PrintStream;
import java.io.Reader;
import java.util.LinkedList;

import org.jvoicexml.processor.srgs.grammar.RuleSpecial;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>SrgsLexer.flex</tt>
 */
class SrgsLexer implements SrgsAbnf.Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int header = 2;
  public static final int ruleref = 4;
  public static final int tag = 6;
  public static final int tag2 = 8;
  public static final int repeat = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\25\1\26\1\1\22\0\1\23\1\100\1\102"+
    "\1\16\1\42\2\0\1\43\2\101\1\12\2\0\1\46\1\10\1\11"+
    "\1\27\1\24\10\75\1\6\1\30\1\72\1\101\1\73\2\0\1\17"+
    "\1\20\1\4\1\66\1\71\1\22\1\67\1\4\1\65\2\4\1\62"+
    "\1\4\1\21\1\64\2\4\1\70\2\4\1\61\1\63\4\4\1\101"+
    "\1\0\1\101\1\0\1\7\1\0\1\32\1\44\1\53\1\54\1\36"+
    "\1\47\1\34\1\56\1\52\2\4\1\31\1\50\1\33\1\40\1\57"+
    "\1\60\1\37\1\45\1\41\1\35\1\55\1\4\1\51\2\4\1\76"+
    "\1\101\1\77\1\74\6\0\1\25\44\0\1\4\12\0\1\4\4\0"+
    "\1\4\1\14\3\0\1\15\27\4\1\0\27\4\1\13\7\4\1\0"+
    "\u01ca\4\4\0\14\4\16\0\5\4\7\0\1\4\1\0\1\4\201\0"+
    "\5\4\1\0\2\4\2\0\4\4\1\0\1\4\6\0\1\4\1\0"+
    "\3\4\1\0\1\4\1\0\24\4\1\0\123\4\1\0\213\4\10\0"+
    "\246\4\1\0\46\4\2\0\1\4\7\0\47\4\110\0\33\4\5\0"+
    "\3\4\55\0\53\4\25\0\12\5\4\0\2\4\1\0\143\4\1\0"+
    "\1\4\17\0\2\4\7\0\2\4\12\5\3\4\2\0\1\4\20\0"+
    "\1\4\1\0\36\4\35\0\131\4\13\0\1\4\16\0\12\5\41\4"+
    "\11\0\2\4\4\0\1\4\5\0\26\4\4\0\1\4\11\0\1\4"+
    "\3\0\1\4\27\0\31\4\107\0\25\4\1\0\10\4\106\0\66\4"+
    "\3\0\1\4\22\0\1\4\7\0\12\4\4\0\12\5\1\0\20\4"+
    "\4\0\10\4\2\0\2\4\2\0\26\4\1\0\7\4\1\0\1\4"+
    "\3\0\4\4\3\0\1\4\20\0\1\4\15\0\2\4\1\0\3\4"+
    "\4\0\12\5\2\4\23\0\6\4\4\0\2\4\2\0\26\4\1\0"+
    "\7\4\1\0\2\4\1\0\2\4\1\0\2\4\37\0\4\4\1\0"+
    "\1\4\7\0\12\5\2\0\3\4\20\0\11\4\1\0\3\4\1\0"+
    "\26\4\1\0\7\4\1\0\2\4\1\0\5\4\3\0\1\4\22\0"+
    "\1\4\17\0\2\4\4\0\12\5\11\0\1\4\13\0\10\4\2\0"+
    "\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4\3\0"+
    "\1\4\36\0\2\4\1\0\3\4\4\0\12\5\1\0\1\4\21\0"+
    "\1\4\1\0\6\4\3\0\3\4\1\0\4\4\3\0\2\4\1\0"+
    "\1\4\1\0\2\4\3\0\2\4\3\0\3\4\3\0\14\4\26\0"+
    "\1\4\25\0\12\5\25\0\10\4\1\0\3\4\1\0\27\4\1\0"+
    "\20\4\3\0\1\4\32\0\3\4\5\0\2\4\4\0\12\5\20\0"+
    "\1\4\4\0\10\4\1\0\3\4\1\0\27\4\1\0\12\4\1\0"+
    "\5\4\3\0\1\4\40\0\1\4\1\0\2\4\4\0\12\5\1\0"+
    "\2\4\22\0\10\4\1\0\3\4\1\0\51\4\2\0\1\4\20\0"+
    "\1\4\5\0\3\4\10\0\3\4\4\0\12\5\12\0\6\4\5\0"+
    "\22\4\3\0\30\4\1\0\11\4\1\0\1\4\2\0\7\4\37\0"+
    "\12\5\21\0\60\4\1\0\2\4\14\0\7\4\11\0\12\5\47\0"+
    "\2\4\1\0\1\4\2\0\2\4\1\0\1\4\2\0\1\4\6\0"+
    "\4\4\1\0\7\4\1\0\3\4\1\0\1\4\1\0\1\4\2\0"+
    "\2\4\1\0\4\4\1\0\2\4\11\0\1\4\2\0\5\4\1\0"+
    "\1\4\11\0\12\5\2\0\4\4\40\0\1\4\37\0\12\5\26\0"+
    "\10\4\1\0\44\4\33\0\5\4\163\0\53\4\24\0\1\4\12\5"+
    "\6\0\6\4\4\0\4\4\3\0\1\4\3\0\2\4\7\0\3\4"+
    "\4\0\15\4\14\0\1\4\1\0\12\5\6\0\46\4\1\0\1\4"+
    "\5\0\1\4\2\0\53\4\1\0\u014d\4\1\0\4\4\2\0\7\4"+
    "\1\0\1\4\1\0\4\4\2\0\51\4\1\0\4\4\2\0\41\4"+
    "\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0\17\4"+
    "\1\0\71\4\1\0\4\4\2\0\103\4\45\0\20\4\20\0\126\4"+
    "\2\0\6\4\3\0\u026c\4\2\0\21\4\1\0\32\4\5\0\113\4"+
    "\6\0\10\4\7\0\15\4\1\0\4\4\16\0\22\4\16\0\22\4"+
    "\16\0\15\4\1\0\3\4\17\0\64\4\43\0\1\4\4\0\1\4"+
    "\3\0\12\5\46\0\12\5\6\0\130\4\10\0\5\4\2\0\42\4"+
    "\1\0\1\4\5\0\106\4\12\0\37\4\47\0\12\5\36\4\2\0"+
    "\5\4\13\0\54\4\4\0\32\4\6\0\12\5\46\0\27\4\11\0"+
    "\65\4\53\0\12\5\6\0\12\5\15\0\1\4\135\0\57\4\21\0"+
    "\7\4\4\0\12\5\51\0\36\4\15\0\2\4\12\5\54\4\32\0"+
    "\44\4\34\0\12\5\3\0\3\4\12\5\44\4\2\0\11\4\140\0"+
    "\4\4\1\0\4\4\3\0\2\4\11\0\300\4\100\0\u0116\4\2\0"+
    "\6\4\2\0\46\4\2\0\6\4\2\0\10\4\1\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\37\4\2\0\65\4\1\0\7\4\1\0"+
    "\1\4\3\0\3\4\1\0\7\4\3\0\4\4\2\0\6\4\4\0"+
    "\15\4\5\0\3\4\1\0\7\4\53\0\1\25\1\25\107\0\1\4"+
    "\15\0\1\4\20\0\15\4\145\0\1\4\4\0\1\4\2\0\12\4"+
    "\1\0\1\4\3\0\5\4\6\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\0\4\4\1\0\13\4\2\0\4\4\5\0\5\4\4\0\1\4"+
    "\64\0\2\4\u0a7b\0\57\4\1\0\57\4\1\0\205\4\6\0\4\4"+
    "\3\0\2\4\14\0\46\4\1\0\1\4\5\0\1\4\2\0\70\4"+
    "\7\0\1\4\20\0\27\4\11\0\7\4\1\0\7\4\1\0\7\4"+
    "\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4"+
    "\120\0\1\4\u01d5\0\2\4\52\0\5\4\5\0\2\4\4\0\126\4"+
    "\6\0\3\4\1\0\132\4\1\0\4\4\5\0\51\4\3\0\136\4"+
    "\21\0\33\4\65\0\20\4\u0200\0\u19b6\4\112\0\u51d6\4\52\0\u048d\4"+
    "\103\0\56\4\2\0\u010d\4\3\0\20\4\12\5\2\4\24\0\57\4"+
    "\20\0\37\4\2\0\106\4\61\0\11\4\2\0\147\4\2\0\44\4"+
    "\1\0\10\4\77\0\13\4\1\0\3\4\1\0\4\4\1\0\27\4"+
    "\35\0\64\4\16\0\62\4\34\0\12\5\30\0\6\4\3\0\1\4"+
    "\1\0\1\4\2\0\12\5\34\4\12\0\27\4\31\0\35\4\7\0"+
    "\57\4\34\0\1\4\12\5\6\0\5\4\1\0\12\4\12\5\5\4"+
    "\1\0\51\4\27\0\3\4\1\0\10\4\4\0\12\5\6\0\27\4"+
    "\3\0\1\4\3\0\62\4\1\0\1\4\3\0\2\4\2\0\5\4"+
    "\2\0\1\4\1\0\1\4\30\0\3\4\2\0\13\4\7\0\3\4"+
    "\14\0\6\4\2\0\6\4\2\0\6\4\11\0\7\4\1\0\7\4"+
    "\1\0\53\4\1\0\12\4\12\0\163\4\15\0\12\5\6\0\u2ba4\4"+
    "\14\0\27\4\4\0\61\4\u2104\0\u016e\4\2\0\152\4\46\0\7\4"+
    "\14\0\5\4\5\0\1\4\1\0\12\4\1\0\15\4\1\0\5\4"+
    "\1\0\1\4\1\0\2\4\1\0\2\4\1\0\154\4\41\0\u016b\4"+
    "\22\0\100\4\2\0\66\4\50\0\14\4\164\0\5\4\1\0\207\4"+
    "\23\0\12\5\7\0\32\4\6\0\32\4\13\0\131\4\3\0\6\4"+
    "\2\0\6\4\2\0\6\4\2\0\3\4\43\0\14\4\1\0\32\4"+
    "\1\0\23\4\1\0\2\4\1\0\17\4\2\0\16\4\42\0\173\4"+
    "\u0185\0\35\4\3\0\61\4\57\0\40\4\20\0\21\4\1\0\10\4"+
    "\6\0\46\4\12\0\36\4\2\0\44\4\4\0\10\4\60\0\236\4"+
    "\2\0\12\5\6\0\44\4\4\0\44\4\4\0\50\4\10\0\64\4"+
    "\234\0\u0137\4\11\0\26\4\12\0\10\4\230\0\6\4\2\0\1\4"+
    "\1\0\54\4\1\0\2\4\3\0\1\4\2\0\27\4\12\0\27\4"+
    "\11\0\37\4\101\0\23\4\1\0\2\4\12\0\26\4\12\0\32\4"+
    "\106\0\70\4\6\0\2\4\100\0\1\4\17\0\4\4\1\0\3\4"+
    "\1\0\33\4\54\0\35\4\3\0\35\4\43\0\10\4\1\0\34\4"+
    "\33\0\66\4\12\0\26\4\12\0\23\4\15\0\22\4\156\0\111\4"+
    "\67\0\63\4\15\0\63\4\u0310\0\65\4\56\0\12\5\23\0\55\4"+
    "\40\0\31\4\7\0\12\5\11\0\44\4\17\0\12\5\20\0\43\4"+
    "\3\0\1\4\14\0\60\4\16\0\4\4\13\0\12\5\1\4\1\0"+
    "\1\4\43\0\22\4\1\0\31\4\124\0\7\4\1\0\1\4\1\0"+
    "\4\4\1\0\17\4\1\0\12\4\7\0\57\4\21\0\12\5\13\0"+
    "\10\4\2\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0"+
    "\5\4\3\0\1\4\22\0\1\4\14\0\5\4\236\0\65\4\22\0"+
    "\4\4\5\0\12\5\46\0\60\4\24\0\2\4\1\0\1\4\10\0"+
    "\12\5\246\0\57\4\51\0\4\4\44\0\60\4\24\0\1\4\13\0"+
    "\12\5\46\0\53\4\25\0\12\5\66\0\32\4\26\0\12\5\u0166\0"+
    "\100\4\12\5\25\0\1\4\u01c0\0\71\4\u0107\0\11\4\1\0\45\4"+
    "\21\0\1\4\17\0\12\5\30\0\36\4\u0370\0\u039a\4\346\0\304\4"+
    "\u0abc\0\u042f\4\u0fd1\0\u0247\4\u21b9\0\u0239\4\7\0\37\4\1\0\12\5"+
    "\146\0\36\4\22\0\60\4\20\0\4\4\14\0\12\5\11\0\25\4"+
    "\5\0\23\4\u0370\0\105\4\13\0\1\4\102\0\15\4\100\0\1\4"+
    "\37\0\u17ed\4\23\0\u02f3\4\u250d\0\2\4\u0bfe\0\153\4\5\0\15\4"+
    "\3\0\11\4\7\0\12\4\u1766\0\125\4\1\0\107\4\1\0\2\4"+
    "\2\0\1\4\2\0\2\4\2\0\4\4\1\0\14\4\1\0\1\4"+
    "\1\0\7\4\1\0\101\4\1\0\4\4\2\0\10\4\1\0\7\4"+
    "\1\0\34\4\1\0\4\4\1\0\5\4\1\0\1\4\3\0\7\4"+
    "\1\0\u0154\4\2\0\31\4\1\0\31\4\1\0\37\4\1\0\31\4"+
    "\1\0\37\4\1\0\31\4\1\0\37\4\1\0\31\4\1\0\37\4"+
    "\1\0\31\4\1\0\10\4\2\0\62\5\u1000\0\305\4\73\0\104\4"+
    "\14\0\12\5\u04a6\0\4\4\1\0\33\4\1\0\2\4\1\0\1\4"+
    "\2\0\1\4\1\0\12\4\1\0\4\4\1\0\1\4\1\0\1\4"+
    "\6\0\1\4\4\0\1\4\1\0\1\4\1\0\1\4\1\0\3\4"+
    "\1\0\2\4\1\0\1\4\2\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\0\1\4\1\0\1\4\1\0\2\4\1\0\1\4\2\0\4\4"+
    "\1\0\7\4\1\0\4\4\1\0\4\4\1\0\1\4\1\0\12\4"+
    "\1\0\21\4\5\0\3\4\1\0\5\4\1\0\21\4\u1144\0\ua6d7\4"+
    "\51\0\u1035\4\13\0\336\4\2\0\u1682\4\u295e\0\u021e\4\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\3\0\1\2\1\3\1\4\1\2\1\4"+
    "\1\2\1\5\1\6\1\4\1\7\1\10\1\2\1\11"+
    "\3\4\1\2\4\4\1\7\1\2\3\12\1\2\3\12"+
    "\1\7\5\1\1\7\1\10\1\13\6\1\1\7\1\10"+
    "\1\2\1\1\1\2\1\14\1\2\4\0\1\3\3\0"+
    "\2\4\2\0\1\15\4\4\1\0\1\16\3\4\1\17"+
    "\1\4\2\0\1\12\1\0\4\12\1\0\2\1\1\3"+
    "\3\1\1\0\2\1\1\3\3\1\1\0\1\1\2\0"+
    "\1\14\6\0\1\20\2\3\1\0\1\21\1\0\2\4"+
    "\1\22\10\4\1\23\5\12\1\24\1\1\1\20\2\3"+
    "\1\1\1\21\1\1\1\0\1\1\1\20\3\3\1\1"+
    "\1\0\1\21\1\1\1\0\1\22\1\25\6\0\6\4"+
    "\1\26\1\27\2\4\1\0\1\30\3\12\1\0\1\1"+
    "\1\3\1\0\1\1\5\0\4\4\1\0\1\4\1\0"+
    "\1\4\1\0\3\12\1\0\2\1\5\0\4\4\1\0"+
    "\1\4\2\0\1\4\1\0\3\12\1\0\2\1\6\0"+
    "\1\4\1\31\1\32\1\0\1\4\2\0\1\4\1\33"+
    "\1\34\2\1\1\0\1\35\1\36\1\0\1\4\2\0"+
    "\1\4\2\1\2\0\1\4\1\37\1\0\1\4\2\1"+
    "\2\0\1\40\1\41\4\1\2\0\1\42\2\1\1\42"+
    "\2\1\1\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[281];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u0218\0\u0218"+
    "\0\u03aa\0\u0218\0\u03ed\0\u0430\0\u0218\0\u0473\0\u04b6\0\u04f9"+
    "\0\u053c\0\u057f\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711"+
    "\0\u0754\0\u0797\0\u07da\0\u081d\0\u0860\0\u08a3\0\u08e6\0\u0929"+
    "\0\u096c\0\u09af\0\u09f2\0\u0a35\0\u0929\0\u0929\0\u0218\0\u0a78"+
    "\0\u0abb\0\u0afe\0\u0b41\0\u0b84\0\u0bc7\0\u0abb\0\u0c0a\0\u0c4d"+
    "\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65"+
    "\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u103a\0\u0430"+
    "\0\u0218\0\u107d\0\u10c0\0\u1103\0\u1146\0\u053c\0\u0218\0\u1189"+
    "\0\u11cc\0\u120f\0\u029e\0\u1252\0\u1295\0\u06ce\0\u12d8\0\u131b"+
    "\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533"+
    "\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u1682\0\u16c5\0\u1708\0\u174b"+
    "\0\u178e\0\u17d1\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920\0\u1963"+
    "\0\u19a6\0\u19e9\0\u1a2c\0\u0ddf\0\u1a6f\0\u0218\0\u1ab2\0\u0218"+
    "\0\u1af5\0\u0218\0\u1b38\0\u1b7b\0\u1bbe\0\u0218\0\u1c01\0\u1c44"+
    "\0\u1c87\0\u1cca\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6\0\u1e19\0\u1e5c"+
    "\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68\0\u1fab\0\u1fee\0\u0929\0\u2031"+
    "\0\u0929\0\u2074\0\u0929\0\u20b7\0\u20fa\0\u213d\0\u0abb\0\u2180"+
    "\0\u0abb\0\u21c3\0\u2206\0\u2249\0\u0abb\0\u228c\0\u22cf\0\u0abb"+
    "\0\u0218\0\u2312\0\u2355\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4"+
    "\0\u24e7\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u029e\0\u029e\0\u2636"+
    "\0\u2679\0\u26bc\0\u0711\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u280b"+
    "\0\u284e\0\u2891\0\u28d4\0\u2917\0\u295a\0\u299d\0\u29e0\0\u2a23"+
    "\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b"+
    "\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47\0\u2d8a\0\u2dcd\0\u2e10\0\u2e53"+
    "\0\u2e96\0\u2ed9\0\u2f1c\0\u2f5f\0\u2fa2\0\u2fe5\0\u3028\0\u306b"+
    "\0\u30ae\0\u30f1\0\u3134\0\u3177\0\u31ba\0\u31fd\0\u3240\0\u3283"+
    "\0\u32c6\0\u3309\0\u334c\0\u338f\0\u33d2\0\u3415\0\u0218\0\u3458"+
    "\0\u349b\0\u34de\0\u3521\0\u029e\0\u3564\0\u35a7\0\u35ea\0\u362d"+
    "\0\u3670\0\u36b3\0\u0218\0\u0218\0\u36f6\0\u3739\0\u377c\0\u0218"+
    "\0\u029e\0\u37bf\0\u3802\0\u3845\0\u3888\0\u38cb\0\u390e\0\u3951"+
    "\0\u3994\0\u39d7\0\u3a1a\0\u0218\0\u3a5d\0\u3aa0\0\u3ae3\0\u3b26"+
    "\0\u3b69\0\u3bac\0\u029e\0\u029e\0\u3bef\0\u3c32\0\u3c75\0\u3cb8"+
    "\0\u3cfb\0\u3d3e\0\u0218\0\u3d81\0\u3dc4\0\u0929\0\u3e07\0\u3e4a"+
    "\0\u0abb";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[281];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\3\12\5\13\1\14\1\11\1\15\2\11\1\16"+
    "\4\13\1\12\1\13\1\11\1\12\1\13\1\17\11\13"+
    "\1\20\1\11\13\13\1\21\12\13\1\22\1\17\1\11"+
    "\1\13\1\23\1\11\2\17\1\24\1\11\3\12\5\13"+
    "\1\14\1\11\1\15\2\11\1\16\4\13\1\12\1\13"+
    "\1\11\1\12\1\13\1\25\1\26\5\13\1\27\1\13"+
    "\1\30\1\20\1\31\1\32\3\13\1\33\1\13\1\34"+
    "\3\13\1\35\1\21\12\13\1\36\2\11\1\13\1\23"+
    "\3\11\1\37\4\11\1\40\4\11\1\14\1\11\1\41"+
    "\2\11\1\16\2\40\1\42\1\40\6\11\11\40\1\11"+
    "\1\43\2\40\1\11\10\40\1\44\3\40\1\45\3\40"+
    "\1\46\2\40\1\47\3\11\1\23\4\11\11\50\1\51"+
    "\1\50\1\52\2\50\1\53\24\50\1\54\26\50\1\55"+
    "\3\50\1\56\1\57\2\50\1\60\11\61\1\62\1\61"+
    "\1\63\2\61\1\64\24\61\1\65\26\61\1\66\3\61"+
    "\1\67\1\70\2\61\1\71\11\11\1\14\1\11\1\72"+
    "\2\11\1\16\5\11\1\73\2\11\1\73\27\11\1\74"+
    "\12\11\1\22\2\11\1\73\1\23\4\11\57\0\1\75"+
    "\65\0\1\76\144\0\3\12\17\0\1\12\2\0\1\12"+
    "\60\0\5\13\2\0\1\13\3\0\4\13\1\0\1\13"+
    "\2\0\1\13\1\0\11\13\2\0\26\13\3\0\1\13"+
    "\12\0\1\77\2\0\1\100\1\101\1\102\11\0\1\77"+
    "\2\0\1\77\45\0\1\77\11\0\5\13\2\0\1\13"+
    "\1\103\2\0\4\13\1\0\1\13\2\0\1\13\1\0"+
    "\11\13\2\0\26\13\3\0\1\13\24\0\1\104\67\0"+
    "\5\13\2\0\1\13\3\0\4\13\1\0\1\13\2\0"+
    "\1\13\1\0\4\13\1\105\1\13\1\106\2\13\2\0"+
    "\26\13\3\0\1\13\105\0\1\107\2\0\102\110\1\111"+
    "\4\0\5\13\2\0\1\13\3\0\4\13\1\0\1\13"+
    "\2\0\1\13\1\0\1\13\1\112\3\13\1\113\3\13"+
    "\2\0\26\13\3\0\1\13\11\0\5\13\2\0\1\13"+
    "\3\0\4\13\1\0\1\13\2\0\1\13\1\0\7\13"+
    "\1\114\1\13\2\0\26\13\3\0\1\13\11\0\5\13"+
    "\2\0\1\13\3\0\4\13\1\0\1\13\2\0\1\13"+
    "\1\0\1\13\1\115\7\13\2\0\26\13\3\0\1\13"+
    "\5\0\43\116\1\117\37\116\4\0\5\13\2\0\1\13"+
    "\3\0\4\13\1\0\1\13\2\0\1\13\1\0\1\13"+
    "\1\120\7\13\2\0\26\13\3\0\1\13\11\0\5\13"+
    "\2\0\1\13\3\0\4\13\1\0\1\13\2\0\1\13"+
    "\1\0\5\13\1\121\1\13\1\122\1\13\2\0\26\13"+
    "\3\0\1\13\11\0\5\13\2\0\1\13\3\0\4\13"+
    "\1\0\1\13\2\0\1\13\1\0\11\13\2\0\1\13"+
    "\1\123\24\13\3\0\1\13\11\0\5\13\2\0\1\13"+
    "\3\0\4\13\1\0\1\13\2\0\1\13\1\0\10\13"+
    "\1\124\2\0\26\13\3\0\1\13\5\0\73\125\1\0"+
    "\7\125\102\126\1\117\4\0\2\40\1\0\1\40\3\0"+
    "\1\40\3\0\4\40\1\0\1\40\2\0\1\40\1\0"+
    "\11\40\2\0\2\40\1\0\23\40\3\0\1\40\11\0"+
    "\2\40\1\0\1\40\3\0\1\40\1\103\2\0\4\40"+
    "\1\0\1\40\2\0\1\40\1\0\11\40\2\0\2\40"+
    "\1\0\23\40\3\0\1\40\11\0\2\40\1\0\1\40"+
    "\3\0\1\40\3\0\4\40\1\0\1\40\2\0\1\40"+
    "\1\0\11\40\2\0\2\40\1\0\12\40\1\127\10\40"+
    "\3\0\1\40\14\0\1\130\77\0\2\40\1\0\1\40"+
    "\3\0\1\40\3\0\4\40\1\0\1\40\2\0\1\40"+
    "\1\0\4\40\1\131\1\40\1\132\2\40\2\0\2\40"+
    "\1\0\23\40\3\0\1\40\11\0\2\40\1\0\1\40"+
    "\3\0\1\40\3\0\4\40\1\0\1\40\2\0\1\40"+
    "\1\0\11\40\2\0\2\40\1\0\15\40\1\133\5\40"+
    "\3\0\1\40\11\0\2\40\1\0\1\40\3\0\1\40"+
    "\3\0\1\134\3\40\1\0\1\40\2\0\1\40\1\0"+
    "\11\40\2\0\2\40\1\0\23\40\3\0\1\40\5\0"+
    "\73\135\1\0\7\135\77\50\1\0\10\50\1\136\2\50"+
    "\1\137\1\140\1\141\11\50\1\136\2\50\1\136\45\50"+
    "\1\136\1\50\1\0\17\50\1\142\62\50\1\0\22\50"+
    "\1\143\57\50\1\0\3\50\43\54\1\50\33\54\1\116"+
    "\3\54\77\60\1\126\2\60\1\50\77\61\1\144\10\61"+
    "\1\145\2\61\1\146\1\147\1\150\11\61\1\145\2\61"+
    "\1\145\45\61\1\145\1\61\1\144\17\61\1\151\62\61"+
    "\1\144\22\61\1\152\57\61\1\144\3\61\43\65\1\61"+
    "\33\65\1\153\3\65\77\61\1\144\1\154\102\61\1\155"+
    "\2\61\77\71\1\156\2\71\1\61\14\0\1\103\112\0"+
    "\1\73\2\0\1\73\16\0\1\157\26\0\1\73\42\0"+
    "\1\160\1\0\1\161\100\0\1\162\1\0\1\163\44\0"+
    "\3\164\17\0\1\164\2\0\1\164\61\0\1\77\2\0"+
    "\1\165\1\166\12\0\1\77\2\0\1\77\45\0\1\77"+
    "\12\0\1\165\16\0\1\165\2\0\1\165\45\0\1\165"+
    "\5\0\1\101\1\167\1\170\100\101\12\102\1\171\70\102"+
    "\15\0\1\172\105\0\1\173\66\0\5\13\2\0\1\13"+
    "\3\0\4\13\1\0\1\13\2\0\1\13\1\0\11\13"+
    "\2\0\1\174\25\13\3\0\1\13\11\0\5\13\2\0"+
    "\1\13\3\0\4\13\1\0\1\13\2\0\1\13\1\0"+
    "\11\13\2\0\6\13\1\175\17\13\3\0\1\13\103\0"+
    "\1\176\10\0\5\13\2\0\1\13\3\0\4\13\1\0"+
    "\1\13\2\0\1\13\1\0\2\13\1\177\6\13\2\0"+
    "\26\13\3\0\1\13\11\0\5\13\2\0\1\13\3\0"+
    "\4\13\1\0\1\13\2\0\1\13\1\0\11\13\2\0"+
    "\5\13\1\200\20\13\3\0\1\13\11\0\5\13\2\0"+
    "\1\13\3\0\4\13\1\0\1\13\2\0\1\13\1\0"+
    "\7\13\1\201\1\13\2\0\26\13\3\0\1\13\11\0"+
    "\5\13\2\0\1\13\3\0\4\13\1\0\1\13\2\0"+
    "\1\13\1\0\3\13\1\202\5\13\2\0\26\13\3\0"+
    "\1\13\11\0\5\13\2\0\1\13\3\0\4\13\1\0"+
    "\1\13\2\0\1\13\1\0\11\13\2\0\1\13\1\203"+
    "\24\13\3\0\1\13\11\0\5\13\2\0\1\13\3\0"+
    "\4\13\1\0\1\13\2\0\1\13\1\0\10\13\1\204"+
    "\2\0\26\13\3\0\1\13\11\0\5\13\2\0\1\13"+
    "\3\0\4\13\1\0\1\13\2\0\1\13\1\0\11\13"+
    "\2\0\10\13\1\205\15\13\3\0\1\13\11\0\5\13"+
    "\2\0\1\13\3\0\4\13\1\0\1\13\2\0\1\13"+
    "\1\0\10\13\1\206\2\0\26\13\3\0\1\13\5\0"+
    "\73\125\1\207\7\125\4\0\2\40\1\0\1\40\3\0"+
    "\1\40\3\0\4\40\1\0\1\40\2\0\1\40\1\0"+
    "\11\40\2\0\2\40\1\0\13\40\1\210\7\40\3\0"+
    "\1\40\50\0\1\40\43\0\2\40\1\0\1\40\3\0"+
    "\1\40\3\0\4\40\1\0\1\40\2\0\1\40\1\0"+
    "\11\40\2\0\1\211\1\40\1\0\23\40\3\0\1\40"+
    "\11\0\2\40\1\0\1\40\3\0\1\40\3\0\4\40"+
    "\1\0\1\40\2\0\1\40\1\0\11\40\2\0\2\40"+
    "\1\0\3\40\1\212\17\40\3\0\1\40\11\0\2\40"+
    "\1\0\1\40\3\0\1\40\3\0\4\40\1\0\1\40"+
    "\2\0\1\40\1\0\11\40\2\0\2\40\1\0\16\40"+
    "\1\213\4\40\3\0\1\40\11\0\2\40\1\0\1\40"+
    "\3\0\1\40\3\0\4\40\1\0\1\40\2\0\1\40"+
    "\1\0\11\40\2\0\2\40\1\0\21\40\1\214\1\40"+
    "\3\0\1\40\5\0\73\135\1\215\7\135\5\50\1\136"+
    "\2\50\1\216\1\217\12\50\1\136\2\50\1\136\45\50"+
    "\1\136\1\50\1\0\10\50\1\216\16\50\1\216\2\50"+
    "\1\216\45\50\1\216\1\50\1\0\3\50\1\140\1\220"+
    "\1\221\74\140\1\101\3\140\12\141\1\222\64\141\1\102"+
    "\3\141\15\50\1\223\61\50\1\0\23\50\1\224\56\50"+
    "\1\0\3\50\100\61\1\225\7\61\1\145\2\61\1\226"+
    "\1\227\12\61\1\145\2\61\1\145\45\61\1\145\1\61"+
    "\1\144\10\61\1\226\16\61\1\226\2\61\1\226\45\61"+
    "\1\226\1\61\1\144\3\61\1\147\1\230\1\231\74\147"+
    "\1\232\3\147\12\150\1\233\64\150\1\234\3\150\15\61"+
    "\1\235\61\61\1\144\23\61\1\236\56\61\1\144\3\61"+
    "\43\65\1\61\34\65\1\237\2\65\76\61\1\240\1\144"+
    "\102\61\1\241\3\61\100\71\1\242\1\71\1\61\24\0"+
    "\1\157\2\0\1\157\45\0\1\157\51\0\1\243\110\0"+
    "\1\244\74\0\1\245\110\0\1\246\35\0\1\165\3\0"+
    "\1\166\12\0\1\165\2\0\1\165\45\0\1\165\7\0"+
    "\1\170\100\0\11\102\1\170\1\171\70\102\21\0\1\247"+
    "\65\0\5\13\2\0\1\13\3\0\4\13\1\0\1\13"+
    "\2\0\1\13\1\0\1\250\10\13\2\0\26\13\3\0"+
    "\1\13\11\0\5\13\2\0\1\13\3\0\4\13\1\0"+
    "\1\13\2\0\1\13\1\0\11\13\2\0\11\13\1\251"+
    "\14\13\3\0\1\13\11\0\5\13\2\0\1\13\3\0"+
    "\4\13\1\0\1\13\2\0\1\13\1\0\3\13\1\252"+
    "\5\13\2\0\26\13\3\0\1\13\11\0\5\13\2\0"+
    "\1\13\3\0\4\13\1\0\1\13\2\0\1\13\1\0"+
    "\11\13\2\0\6\13\1\253\17\13\3\0\1\13\11\0"+
    "\5\13\2\0\1\13\3\0\4\13\1\0\1\13\2\0"+
    "\1\13\1\0\10\13\1\254\2\0\26\13\3\0\1\13"+
    "\11\0\5\13\2\0\1\13\3\0\4\13\1\0\1\13"+
    "\2\0\1\13\1\0\11\13\2\0\2\13\1\255\23\13"+
    "\3\0\1\13\11\0\5\13\2\0\1\13\3\0\4\13"+
    "\1\0\1\13\2\0\1\13\1\0\5\13\1\256\3\13"+
    "\2\0\26\13\3\0\1\13\11\0\5\13\2\0\1\13"+
    "\3\0\4\13\1\0\1\13\2\0\1\13\1\0\1\13"+
    "\1\257\7\13\2\0\26\13\3\0\1\13\11\0\5\13"+
    "\2\0\1\13\3\0\4\13\1\0\1\13\2\0\1\13"+
    "\1\0\5\13\1\260\3\13\2\0\26\13\3\0\1\13"+
    "\11\0\5\13\2\0\1\13\3\0\4\13\1\0\1\13"+
    "\2\0\1\13\1\0\11\13\2\0\13\13\1\261\12\13"+
    "\3\0\1\13\101\0\1\262\12\0\2\40\1\0\1\40"+
    "\3\0\1\40\3\0\4\40\1\0\1\40\2\0\1\40"+
    "\1\0\11\40\2\0\2\40\1\0\13\40\1\263\7\40"+
    "\3\0\1\40\11\0\2\40\1\0\1\40\3\0\1\40"+
    "\3\0\4\40\1\0\1\40\2\0\1\40\1\0\1\264"+
    "\10\40\2\0\2\40\1\0\23\40\3\0\1\40\11\0"+
    "\2\40\1\0\1\40\3\0\1\40\3\0\4\40\1\0"+
    "\1\40\2\0\1\40\1\0\11\40\2\0\2\40\1\0"+
    "\6\40\1\265\14\40\3\0\1\40\11\0\2\40\1\0"+
    "\1\40\3\0\1\40\3\0\4\40\1\0\1\40\2\0"+
    "\1\40\1\0\11\40\2\0\2\40\1\0\17\40\1\263"+
    "\3\40\3\0\1\40\11\0\2\40\1\0\1\40\3\0"+
    "\1\40\3\0\1\40\1\266\2\40\1\0\1\40\2\0"+
    "\1\40\1\0\11\40\2\0\2\40\1\0\23\40\3\0"+
    "\1\40\101\0\1\267\6\0\5\50\1\216\3\50\1\217"+
    "\12\50\1\216\2\50\1\216\45\50\1\216\1\50\1\0"+
    "\5\50\1\221\74\50\1\0\3\50\11\141\1\221\1\222"+
    "\64\141\1\102\3\141\21\50\1\270\55\50\1\0\3\50"+
    "\77\61\1\0\10\61\1\226\3\61\1\227\12\61\1\226"+
    "\2\61\1\226\45\61\1\226\1\61\1\144\5\61\1\231"+
    "\74\61\1\144\3\61\1\147\1\230\1\231\75\147\1\271"+
    "\2\147\11\150\1\231\1\233\64\150\1\234\15\150\1\233"+
    "\65\150\1\272\2\150\21\61\1\273\55\61\1\144\3\61"+
    "\43\65\1\61\33\65\1\116\3\65\77\71\1\126\2\71"+
    "\1\61\31\0\1\274\126\0\1\275\56\0\1\276\126\0"+
    "\1\277\47\0\1\300\64\0\5\13\2\0\1\13\3\0"+
    "\4\13\1\0\1\13\2\0\1\13\1\0\11\13\2\0"+
    "\6\13\1\301\17\13\3\0\1\13\11\0\5\13\2\0"+
    "\1\13\3\0\4\13\1\0\1\13\2\0\1\13\1\0"+
    "\1\13\1\302\7\13\2\0\26\13\3\0\1\13\11\0"+
    "\5\13\2\0\1\13\3\0\4\13\1\0\1\13\2\0"+
    "\1\13\1\0\4\13\1\303\4\13\2\0\26\13\3\0"+
    "\1\13\11\0\5\13\2\0\1\13\3\0\4\13\1\0"+
    "\1\13\2\0\1\13\1\0\11\13\2\0\7\13\1\304"+
    "\16\13\3\0\1\13\11\0\5\13\2\0\1\13\3\0"+
    "\4\13\1\305\1\13\2\0\1\13\1\0\11\13\2\0"+
    "\26\13\3\0\1\13\11\0\5\13\2\0\1\13\3\0"+
    "\4\13\1\0\1\13\2\0\1\13\1\0\11\13\2\0"+
    "\3\13\1\306\22\13\3\0\1\13\11\0\5\13\2\0"+
    "\1\13\3\0\4\13\1\307\1\13\2\0\1\13\1\0"+
    "\11\13\2\0\26\13\3\0\1\13\11\0\5\13\2\0"+
    "\1\13\3\0\4\13\1\0\1\13\2\0\1\13\1\0"+
    "\11\13\2\0\2\13\1\310\23\13\3\0\1\13\77\0"+
    "\1\311\14\0\2\40\1\0\1\40\3\0\1\40\3\0"+
    "\4\40\1\0\1\40\2\0\1\40\1\0\11\40\2\0"+
    "\2\40\1\0\3\40\1\312\17\40\3\0\1\40\11\0"+
    "\2\40\1\0\1\40\3\0\1\40\3\0\4\40\1\0"+
    "\1\40\2\0\1\40\1\0\1\40\1\313\7\40\2\0"+
    "\2\40\1\0\23\40\3\0\1\40\11\0\2\40\1\0"+
    "\1\40\3\0\1\40\3\0\1\314\3\40\1\0\1\40"+
    "\2\0\1\40\1\0\11\40\2\0\2\40\1\0\23\40"+
    "\3\0\1\40\77\0\1\315\10\0\22\50\1\316\54\50"+
    "\1\0\3\50\1\147\1\230\1\231\74\147\1\101\3\147"+
    "\12\150\1\233\64\150\1\102\3\150\22\61\1\317\54\61"+
    "\1\144\3\61\52\0\1\320\62\0\1\321\122\0\1\322"+
    "\62\0\1\323\73\0\1\324\63\0\5\13\2\0\1\13"+
    "\3\0\4\13\1\0\1\13\2\0\1\13\1\0\11\13"+
    "\2\0\7\13\1\325\16\13\3\0\1\13\11\0\5\13"+
    "\2\0\1\13\3\0\4\13\1\0\1\13\2\0\1\13"+
    "\1\0\10\13\1\326\2\0\26\13\3\0\1\13\11\0"+
    "\5\13\2\0\1\13\3\0\4\13\1\0\1\13\2\0"+
    "\1\13\1\0\1\13\1\327\7\13\2\0\26\13\3\0"+
    "\1\13\11\0\5\13\2\0\1\13\3\0\4\13\1\0"+
    "\1\13\2\0\1\13\1\0\7\13\1\330\1\13\2\0"+
    "\26\13\3\0\1\13\30\0\1\305\16\0\1\331\44\0"+
    "\5\13\2\0\1\13\3\0\4\13\1\0\1\13\2\0"+
    "\1\13\1\0\7\13\1\332\1\13\2\0\26\13\3\0"+
    "\1\13\30\0\1\307\30\0\1\333\1\334\31\0\5\13"+
    "\2\0\1\13\3\0\4\13\1\0\1\13\2\0\1\13"+
    "\1\0\5\13\1\335\3\13\2\0\26\13\3\0\1\13"+
    "\5\0\73\336\1\0\7\336\4\0\2\40\1\0\1\40"+
    "\3\0\1\40\3\0\4\40\1\0\1\40\2\0\1\40"+
    "\1\0\11\40\2\0\2\40\1\0\4\40\1\337\16\40"+
    "\3\0\1\40\11\0\2\40\1\0\1\40\3\0\1\40"+
    "\3\0\4\40\1\0\1\40\2\0\1\40\1\0\10\40"+
    "\1\340\2\0\2\40\1\0\23\40\3\0\1\40\11\0"+
    "\2\40\1\0\1\40\3\0\1\40\3\0\4\40\1\0"+
    "\1\40\2\0\1\40\1\0\11\40\2\0\2\40\1\0"+
    "\20\40\1\341\2\40\3\0\1\40\5\0\73\342\1\0"+
    "\7\342\23\50\1\343\53\50\1\0\3\50\23\61\1\344"+
    "\53\61\1\144\3\61\53\0\1\345\70\0\1\346\114\0"+
    "\1\347\70\0\1\350\65\0\1\351\57\0\3\352\5\13"+
    "\2\0\1\13\3\0\4\13\1\352\1\13\1\0\1\352"+
    "\1\13\1\0\11\13\2\0\26\13\3\0\1\13\11\0"+
    "\5\13\2\0\1\13\3\0\4\13\1\0\1\13\2\0"+
    "\1\13\1\0\5\13\1\325\3\13\2\0\26\13\3\0"+
    "\1\13\11\0\5\13\2\0\1\13\3\0\4\13\1\0"+
    "\1\13\2\0\1\13\1\0\3\13\1\353\5\13\2\0"+
    "\26\13\3\0\1\13\11\0\5\13\2\0\1\13\3\0"+
    "\4\13\1\0\1\13\2\0\1\13\1\0\2\13\1\354"+
    "\6\13\2\0\26\13\3\0\1\13\11\0\1\355\6\0"+
    "\1\355\3\0\4\355\6\0\11\355\1\0\1\356\2\355"+
    "\1\0\23\355\15\0\5\13\2\0\1\13\3\0\4\13"+
    "\1\0\1\13\2\0\1\13\1\0\6\13\1\357\2\13"+
    "\2\0\26\13\3\0\1\13\46\0\1\360\101\0\1\361"+
    "\46\0\5\13\2\0\1\13\3\0\4\13\1\0\1\13"+
    "\2\0\1\13\1\0\11\13\2\0\14\13\1\362\11\13"+
    "\3\0\1\13\5\0\73\336\1\363\7\336\1\0\3\352"+
    "\2\40\1\0\1\40\3\0\1\40\3\0\4\40\1\352"+
    "\1\40\1\0\1\352\1\40\1\0\11\40\2\0\2\40"+
    "\1\0\23\40\3\0\1\40\11\0\2\40\1\0\1\40"+
    "\3\0\1\40\3\0\4\40\1\0\1\40\2\0\1\40"+
    "\1\0\5\40\1\337\3\40\2\0\2\40\1\0\23\40"+
    "\3\0\1\40\11\0\2\40\1\0\1\40\3\0\1\40"+
    "\3\0\4\40\1\0\1\40\2\0\1\40\1\0\11\40"+
    "\2\0\2\40\1\0\22\40\1\263\3\0\1\40\5\0"+
    "\73\342\1\364\7\342\24\50\1\365\52\50\1\0\3\50"+
    "\24\61\1\366\52\61\1\144\3\61\1\0\3\352\17\0"+
    "\1\352\2\0\1\352\112\0\1\345\102\0\1\347\44\0"+
    "\1\367\2\0\22\367\2\0\54\367\1\0\3\352\17\0"+
    "\1\352\2\0\1\352\13\0\1\370\44\0\5\13\2\0"+
    "\1\13\3\0\4\13\1\0\1\13\2\0\1\13\1\0"+
    "\5\13\1\371\3\13\2\0\26\13\3\0\1\13\11\0"+
    "\2\355\1\0\1\355\3\0\1\355\3\0\4\355\1\0"+
    "\1\355\2\0\1\355\1\0\11\355\2\0\2\355\1\0"+
    "\23\355\3\0\1\355\14\0\1\372\77\0\5\13\2\0"+
    "\1\13\3\0\4\13\1\0\1\13\2\0\1\13\1\0"+
    "\11\13\2\0\4\13\1\373\21\13\3\0\1\13\55\0"+
    "\1\374\104\0\1\375\34\0\5\13\2\0\1\13\3\0"+
    "\4\13\1\0\1\13\2\0\1\13\1\0\4\13\1\376"+
    "\4\13\2\0\26\13\3\0\1\13\5\0\1\377\2\50"+
    "\22\377\2\50\50\377\1\367\3\377\1\u0100\2\61\22\u0100"+
    "\2\61\50\u0100\1\u0101\3\u0100\27\0\1\u0102\116\0\1\355"+
    "\43\0\5\13\2\0\1\13\3\0\4\13\1\0\1\13"+
    "\2\0\1\13\1\0\1\13\1\u0103\7\13\2\0\26\13"+
    "\3\0\1\13\54\0\1\u0104\106\0\1\u0105\33\0\5\13"+
    "\2\0\1\13\3\0\4\13\1\0\1\13\2\0\1\13"+
    "\1\0\11\13\2\0\6\13\1\u0106\17\13\3\0\1\13"+
    "\5\0\27\50\1\u0107\47\50\1\0\3\50\27\61\1\u0108"+
    "\47\61\1\144\32\61\1\u0108\50\61\1\225\2\61\23\0"+
    "\1\u0109\4\0\1\u010a\56\0\5\13\2\0\1\13\3\0"+
    "\4\13\1\0\1\13\2\0\1\13\1\0\10\13\1\u010b"+
    "\2\0\26\13\3\0\1\13\43\0\1\u0104\50\0\5\13"+
    "\2\0\1\13\3\0\4\13\1\0\1\13\2\0\1\13"+
    "\1\0\11\13\2\0\11\13\1\u010c\14\13\3\0\1\13"+
    "\5\0\23\50\1\u010d\4\50\1\u010e\46\50\1\0\3\50"+
    "\23\61\1\u010f\4\61\1\u0110\46\61\1\144\3\61\4\0"+
    "\5\u0111\2\0\1\u0111\3\0\4\u0111\1\0\1\u0111\2\0"+
    "\1\u0111\1\0\11\u0111\2\0\26\u0111\3\0\1\u0111\6\0"+
    "\1\u0112\1\u0113\100\0\4\50\5\u0114\2\50\1\u0114\3\50"+
    "\4\u0114\1\50\1\u0114\2\50\1\u0114\1\50\11\u0114\2\50"+
    "\26\u0114\3\50\1\u0114\1\50\1\0\4\50\1\u0115\1\u0116"+
    "\74\50\1\0\3\50\4\61\5\u0117\2\61\1\u0117\3\61"+
    "\4\u0117\1\61\1\u0117\2\61\1\u0117\1\61\11\u0117\2\61"+
    "\26\u0117\3\61\1\u0117\1\61\1\144\4\61\1\u0118\1\u0119"+
    "\74\61\1\144\3\61\4\0\5\u0111\2\0\1\u0111\3\0"+
    "\4\u0111\1\0\1\u0111\2\0\1\u0111\1\u010a\11\u0111\2\0"+
    "\26\u0111\3\0\1\u0111\7\0\1\u0113\100\0\4\50\5\u0114"+
    "\2\50\1\u0114\3\50\4\u0114\1\50\1\u0114\2\50\1\u0114"+
    "\1\u010e\11\u0114\2\50\26\u0114\3\50\1\u0114\1\50\1\0"+
    "\5\50\1\u0116\74\50\1\0\3\50\4\61\5\u0117\2\61"+
    "\1\u0117\3\61\4\u0117\1\61\1\u0117\2\61\1\u0117\1\u0110"+
    "\11\u0117\2\61\26\u0117\3\61\1\u0117\1\61\1\144\5\61"+
    "\1\u0119\74\61\1\144\3\61";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16013];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\1\3\0\1\11\5\1\2\11\1\1\1\11"+
    "\2\1\1\11\31\1\1\11\15\1\4\0\1\1\3\0"+
    "\2\1\2\0\1\11\4\1\1\0\1\11\5\1\2\0"+
    "\1\1\1\0\4\1\1\0\6\1\1\0\6\1\1\0"+
    "\1\1\2\0\1\1\4\0\1\1\1\0\1\11\1\1"+
    "\1\11\1\0\1\11\1\0\2\1\1\11\26\1\1\0"+
    "\6\1\1\0\2\1\1\0\1\1\1\11\6\0\12\1"+
    "\1\0\4\1\1\0\2\1\1\0\1\1\5\0\4\1"+
    "\1\0\1\1\1\0\1\1\1\0\3\1\1\0\2\1"+
    "\5\0\4\1\1\0\1\1\2\0\1\1\1\0\3\1"+
    "\1\0\2\1\2\0\1\11\3\0\3\1\1\0\1\1"+
    "\2\0\1\1\2\11\2\1\1\0\1\11\1\1\1\0"+
    "\1\1\2\0\3\1\2\0\1\1\1\11\1\0\3\1"+
    "\2\0\6\1\2\0\1\11\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[281];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
  private String origin;

  private Object yylval;

  private LinkedList<Token> commentTokens = new LinkedList<>();

  private LinkedList<Token> tokens = new LinkedList<>();

  private PrintStream err;

  public SrgsLexer(Reader r, PrintStream ps) {
    this(r);
    err = ps;
  }

  /**
   * Method to retrieve the beginning position of the last scanned token.
   * @return the position at which the last scanned token starts.
   */
  public Position getStartPos() {
    return new Position(yyline, yycolumn, yychar, origin);
  }

  /**
   * Method to retrieve the ending position of the last scanned token.
   * @return the first position beyond the last scanned token.
   */
  public Position getEndPos() {
    int len = yylength();
    return new Position(yyline, yycolumn + len, yychar + len, origin);
  }

  /**
   * Method to retrieve the semantic value of the last scanned token.
   * @return the semantic value of the last scanned token.
   */
  public Object getLVal() {
    Object result = yylval;
    yylval = null;
    return result;
  }

  /**
   * Entry point for the scanner.  Returns the token identifier corresponding
   * to the next token and prepares to return the semantic value
   * and beginning/ending positions of the token.
   *
   * This is a wrapper around the internal yylex method to collect tokens such
   * as comments, whitespace, etc. to use them later on in the compiler's
   * output. Also, other necessary functionality can be put her (extracting
   * the full input text?)
   *
   * @return the token identifier corresponding to the next token.
   */
  public int yylex() throws java.io.IOException {
    int result = yylex_internal();
    return result;
  }

  /**
   * Entry point for error reporting.  Emits an error
   * referring to the given location in a user-defined way.
   *
   * @param loc The location of the element to which the
   *                error message is related
   * @param msg The string for the error message.
   */
  public void yyerror (SrgsAbnf.Location loc, String msg) {
    err.println(loc.begin + ": error: " + msg);
  }

  public void setOrigin(String s) { origin = s; }

  /** Return the collected tokens */
  public LinkedList<Token> getTokens() { return tokens; }

  /** Return the collected comment tokens */
  public LinkedList<Token> getCommentTokens() { return commentTokens; }

  /** Add a non-comment and non-whitespace token */
  public int token(int token) {
    tokens.add(new Token(yytext(), getStartPos(), getEndPos()));
    return token;
  }

  /** Add a comment or whitespace token */
  public void addComment(String comment) {
    commentTokens.add(new Token(comment, getStartPos(), getEndPos()));
  }

  public void begin_repeat() { yybegin(repeat); }

  public void begin_header() { yybegin(header); }

  // RuleReference with URI with media
  private void treatUriWithMedia() {
    String uri_with_media = yytext();
    int uriend = uri_with_media.indexOf(">~<");
    String base = uri_with_media.substring(1, uriend);
    String type = uri_with_media.substring(uriend + 3, uri_with_media.length() - 1);
    yylval = new String[]{ base, type };
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  SrgsLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2666) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex_internal() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return SrgsAbnf.Lexer.EOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yylval = yytext(); return Tag;
            } 
            // fall through
          case 35: break;
          case 2: 
            { return IllegalCharacter;
            } 
            // fall through
          case 36: break;
          case 3: 
            { addComment(yytext());
            } 
            // fall through
          case 37: break;
          case 4: 
            { yylval = yytext();
  return Nmtoken;
            } 
            // fall through
          case 38: break;
          case 5: 
            { return yytext().charAt(0);
            } 
            // fall through
          case 39: break;
          case 6: 
            { yybegin(ruleref);
            } 
            // fall through
          case 40: break;
          case 7: 
            { yybegin(repeat); return '<';
            } 
            // fall through
          case 41: break;
          case 8: 
            { yybegin(tag) ; return TagStart;
            } 
            // fall through
          case 42: break;
          case 9: 
            { return ';' ;
            } 
            // fall through
          case 43: break;
          case 10: 
            { yylval = yytext();
  yybegin(YYINITIAL);
  return RuleName;
            } 
            // fall through
          case 44: break;
          case 11: 
            { yybegin(YYINITIAL) ; return TagEnd;
            } 
            // fall through
          case 45: break;
          case 12: 
            { yybegin(YYINITIAL);
  yylval = yytext();
  return Repeat;
            } 
            // fall through
          case 46: break;
          case 13: 
            { // Quoted strings
    yylval = yytext();//.substring(1, yylength()-1) ;
    return QuotedCharacters ;
            } 
            // fall through
          case 47: break;
          case 14: 
            { // 'for syntax highlighting''
    yylval = yytext().substring(1, yylength()-1) ;
    return QuotedCharacters ;
            } 
            // fall through
          case 48: break;
          case 15: 
            { return DECL_IS ;
            } 
            // fall through
          case 49: break;
          case 16: 
            { yylval = yytext().substring(1, yylength() - 1);
  return SlashNum ;
            } 
            // fall through
          case 50: break;
          case 17: 
            { //fputc('\xef', out); fputc('\xbb', out); fputc('\xbf', out);
                  // UTF8 byte order mark
            } 
            // fall through
          case 51: break;
          case 18: 
            { yybegin(tag2); return TagStart;
            } 
            // fall through
          case 52: break;
          case 19: 
            { yylval = new String[]{ yytext().substring(1, yylength() - 1)};
  // RuleReference with URI without media
  return URI;
            } 
            // fall through
          case 53: break;
          case 20: 
            { yylval = new String[]{ yytext().substring(1, yylength() - 1)};
  // RuleReference with URI without media
  yybegin(YYINITIAL);
  return URI;
            } 
            // fall through
          case 54: break;
          case 21: 
            { yybegin(YYINITIAL); return TagEnd;
            } 
            // fall through
          case 55: break;
          case 22: 
            { return DECL_BASE;
            } 
            // fall through
          case 56: break;
          case 23: 
            { return DECL_META ;
            } 
            // fall through
          case 57: break;
          case 24: 
            { switch (yytext()) {
    case "NULL": yylval = RuleSpecial.NULL; break;
    case "VOID": yylval = RuleSpecial.VOID; break;
    case "GARBAGE": yylval = RuleSpecial.GARBAGE; break;
  }
  yybegin(YYINITIAL);
  return specialRuleReference;
            } 
            // fall through
          case 58: break;
          case 25: 
            { return DECL_LEXICON ;
            } 
            // fall through
          case 59: break;
          case 26: 
            { String s = yytext();
  int dollar = s.indexOf("$");
  yylval = yytext().substring(dollar+1);
  return DECL_ROOT;
            } 
            // fall through
          case 60: break;
          case 27: 
            { treatUriWithMedia();
  return URI;
            } 
            // fall through
          case 61: break;
          case 28: 
            { treatUriWithMedia();
  yybegin(YYINITIAL);
  return URI;
            } 
            // fall through
          case 62: break;
          case 29: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 6;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 7;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { yybegin(YYINITIAL);
  return ((yytext().charAt(1) == 'r') ? Private : Public) ;
            } 
            // fall through
          case 63: break;
          case 30: 
            { return DECL_LANG;
            } 
            // fall through
          case 64: break;
          case 31: 
            { String[] chunks = yytext().split("  *");
  yylval=chunks[1];
  return DECL_MODE ;
            } 
            // fall through
          case 65: break;
          case 32: 
            { return DECL_TAG_FORMAT ;
            } 
            // fall through
          case 66: break;
          case 33: 
            { return DECL_HTTP_EQUIV ;
            } 
            // fall through
          case 67: break;
          case 34: 
            { yybegin(header);
  yylval = yytext().substring(yytext().indexOf(' ') + 1);
  return SelfIdentHeader;
            } 
            // fall through
          case 68: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
